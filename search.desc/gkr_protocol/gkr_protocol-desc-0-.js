searchState.loadedDescShard("gkr_protocol", 0, "The implementation of the GKR protocol.\n<code>Prover</code> begins the protocol by the claim about the outputs.\nContains the error value\nGKR protocol error type.\nIn the final the restriction polynomial $q$ is added.\nThe first round has completed.\nContains the success value\nThe state of the Prover.\nMessages emitted by the <code>Prover</code>.\nSends out the $r_i$ to be used by the <code>Prover</code>.\nGKR protocol result type.\nThe j-th round has started.\nInstruct the <code>Verifier</code> to start a Sum-Check protocol for …\nA step of the current sum-check protocol.\nA result of running a step in the current sum check …\nThe state of the Verifier.\nMessages emitted by the <code>Verifier</code>.\nWrong state.\nGet the $c_1$ of the current Sum-Check prover.\nPerform the final check of the input.\nFinal random point in the Sum-Check protocol.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompute a line\nCreate a new <code>Verifier</code> with the claim of the <code>Prover</code>.\nCreate a new <code>Prover</code> state from a circuit and an evaluation.\nReceive a message from <code>Prover</code>.\nReceive a message from the <code>Verifier</code>.\nRestrict a polynomial to a given line.\nPerform a step of the Sum-Check protocol and provide a …\nAt the start of the protocol $P$ sends a function $D: …\nCreate a Sum-Check prover for round $i$.\nA $c_1$ from Sum-Check protocol.\nClaimed outputs\nA number of variables.\nA polynomial sent at each step of Sum-Check.\nA polynomial sent at each step of Sum-Check.\nSends a univariate polynomial $q$ of degree at most k_…\nAt which round of GKR this Sum-Check is being started.\n$r_i$\nResult of a Sum-Check round.")