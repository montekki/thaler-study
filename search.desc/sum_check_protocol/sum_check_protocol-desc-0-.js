searchState.loadedDescShard("sum_check_protocol", 0, "A convenient way to iterate over $n$-dimentional boolean …\nAn error type of sum check protocol\nOn final round the verifier outputs <code>true</code> or <code>false</code> if it …\nOn $j$-th round the verifier outputs a random $r_j$ value\nThe state of the Prover.\nAn abstraction over all types of polynomials that may be …\nThe state of the Verifier.\nValues returned by Validator as a result of its run on …\nGet the value $C_1$ that prover claims equal true answer.\nEvaluates <code>self</code> at a given point\nReduce the number of variables in <code>Self</code> by fixing a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an $n$-dimentional <code>BooleanHypercube</code>\nCreate a new <code>Prover</code> state with the polynomial $g$.\nCreate the new state of the <code>Verifier</code>.\nReturns the number of variables in <code>self</code>\nPerform $j$-th round of the <code>Prover</code> side of the prococol.\nPerform the $j$-th round of the <code>Verifier</code> side of the …\nReturns a list of evaluations over the domain, which is the\nCompute the $j$-th round of polynomial for sumcheck over …")