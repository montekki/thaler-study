var searchIndex = JSON.parse('{\
"matrix_multiplication":{"doc":"","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["G","borrow","borrow_mut","clone","clone_into","evaluate","fix_variables","from","into","new","num_vars","to_evaluations","to_owned","to_univariate","try_from","try_into","type_id","vzip"],"q":["matrix_multiplication","","","","","","","","","","","","","","","","",""],"d":["A polynomial of form $g(z) = \\\\tilde{f}_A(r_1,z) \\\\cdot …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create $g$ for evaluating $f_A \\\\cdot f_B$ at any given …","","","","","","","",""],"i":[0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,[[]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[4]]],[[5,[4]]]],[[[3,[4]]],[[3,[4]]]],[[]],[[]],[6,[[3,[2]]]],[[[3,[4]]],6],[[[3,[4]]],[[7,[4]]]],[[]],[[[3,[4]]],[[8,[4]]]],[[],9],[[],9],[[],10],[[]]],"p":[[8,"Clone"],[8,"Field"],[3,"G"],[8,"FftField"],[4,"Option"],[15,"usize"],[3,"Vec"],[3,"SparsePolynomial"],[4,"Result"],[3,"TypeId"]]},\
"multilinear_extensions":{"doc":"","t":[5,5],"n":["cti_multilinear_from_evaluations","vsbw_multilinear_from_evaluations"],"q":["multilinear_extensions",""],"d":["Evaluate multilinear extension with an algorith from <code>VSBW13</code>","Evaluate multilinear extension of with an algorithm from …"],"i":[0,0],"f":[[[],1],[[],1]],"p":[[8,"Field"]]},\
"sum_check_protocol":{"doc":"","t":[3,4,13,13,3,13,8,3,4,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["BooleanHypercube","Error","FinalRound","JthRound","Prover","ProverClaimMismatch","SumCheckPolynomial","Verifier","VerifierRoundResult","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c_1","evaluate","fix_variables","fmt","fmt","from","from","from","from","from","into","into","into","into","into","into_iter","new","new","new","next","num_vars","provide","round","round","to_evaluations","to_string","to_univariate","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","0","1","0","0"],"q":["sum_check_protocol","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sum_check_protocol::Error","","sum_check_protocol::VerifierRoundResult",""],"d":["A convenient way to iterate over $n$-dimentional boolean …","An error type of sum check protocol","On final round the verifier outputs <code>true</code> or <code>false</code> if it …","On $j$-th round the verifier outputs a random $r_j$ value","The state of the Prover.","","An abstraction over all types of polynomials that may be …","The state of the Verifier.","Values returned by Validator as a result of its run on …","","","","","","","","","","","Get the value $C_1$ that prover claims equal true answer.","Evaluates <code>self</code> at a given point","Reduce the number of variables in <code>Self</code> by fixing a …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create an $n$-dimentional <code>BooleanHypercube</code>","Create a new <code>Prover</code> state with the polynomial $g$.","Create the new state of the <code>Verifier</code>.","","Returns the number of variables in <code>self</code>","","Perform $j$-th round of the <code>Prover</code> side of the prococol.","Perform the $j$-th round of the [<code>Verifier]</code> side of the …","Returns a list of evaluations over the domain, which is the","","Compute the $j$-th round of polynomial for sumcheck over …","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,14,14,0,5,0,0,0,9,3,11,14,5,9,3,11,14,5,3,2,2,5,5,9,3,11,14,5,9,3,11,14,5,9,9,3,11,9,2,5,3,11,2,5,2,9,3,11,14,5,9,3,11,14,5,9,3,11,14,5,9,3,11,14,5,19,19,20,21],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[1,[2,[1]]]]],1],[[],4],[[]],[[5,6],7],[[5,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,[[9,[1]]]],[[[2,[1]]],[[3,[1,[2,[1]]]]]],[[10,1,[2,[1]]],[[11,[1,[2,[1]]]]]],[[[9,[1]]],4],[[],10],[12],[[[3,[1,[2,[1]]]],1,10],[[4,[[13,[1]]]]]],[[[11,[1,[2,[1]]]],[13,[1]]],[[15,[[14,[1]],5]]]],[[],16],[[],17],[[],13],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],0,0,0,0],"p":[[8,"Field"],[8,"SumCheckPolynomial"],[3,"Prover"],[4,"Option"],[4,"Error"],[3,"Formatter"],[6,"Result"],[15,"u32"],[3,"BooleanHypercube"],[15,"usize"],[3,"Verifier"],[3,"Demand"],[3,"SparsePolynomial"],[4,"VerifierRoundResult"],[4,"Result"],[3,"Vec"],[3,"String"],[3,"TypeId"],[13,"ProverClaimMismatch"],[13,"JthRound"],[13,"FinalRound"]]},\
"thaler_study":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"triangle_counting":{"doc":"","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["G","borrow","borrow_mut","clone","clone_into","evaluate","fix_variables","from","into","new_adj_matrix","num_vars","to_evaluations","to_owned","to_univariate","try_from","try_into","type_id","vzip"],"q":["triangle_counting","","","","","","","","","","","","","","","","",""],"d":["A polynomial","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new $3 \\\\log n$-variate polynomial $g(X,Y,Z)$ from","","","","","","","",""],"i":[0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,[[]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[4]]],[[5,[4]]]],[[[3,[4]]],[[3,[4]]]],[[]],[[]],[6,[[3,[2]]]],[[[3,[4]]],6],[[[3,[4]]],[[7,[4]]]],[[]],[[[3,[4]]],[[8,[4]]]],[[],9],[[],9],[[],10],[[]]],"p":[[8,"Clone"],[8,"Field"],[3,"G"],[8,"FftField"],[4,"Option"],[15,"usize"],[3,"Vec"],[3,"SparsePolynomial"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
