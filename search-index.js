var searchIndex = new Map(JSON.parse('[\
["fiat_shamir",{"doc":"Fiat-Shamir Transformation implementation.","t":"PGFKKPFIPPNNNNNNNNNNNNNNMHNNNMMMNNNNNNNNNNNHNNN","n":["Err","Error","FiatShamirTranscript","InteractiveProver","InteractiveVerifier","Ok","RandNums","Result","Serialization","SumCheck","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","draw","fmt","fmt","from","from","from","from","from","g_1","generate_transcript","into","into","into","num_rounds","round","round","source","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify_transcript","vzip","vzip","vzip"],"q":[[0,"fiat_shamir"],[47,"core::marker"],[48,"core::fmt"],[49,"core::fmt"],[50,"ark_serialize::error"],[51,"alloc::vec"],[52,"ark_ff::fields"],[53,"sum_check_protocol"],[54,"core::option"],[55,"alloc::string"],[56,"core::result"],[57,"core::any"]],"d":["Contains the error value","Crate error type.","A transcript of the Fiat-Shamir transformation.","A trait describing an Interactive Prover.","A trait describing an Interactive Verifier.","Contains the success value","A helper struct to feed non-random values into interactive …","Crate <code>Result</code> type.","An error in ark_serialize.","A SumCheck error.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Get $g_1$.","Generate a Fiat-Shamir transcript turning an Interactive …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Number of rounds.","Perform a step with V’s challenge $r_i$.","Perform a round of the Interactive Verifier.","","","","","","","","","","","","Perform verification of the Fiat-Shamir transcript turning …","","",""],"i":[11,0,0,0,0,11,0,0,3,3,12,1,3,12,1,3,1,3,3,12,1,3,3,3,8,0,12,1,3,8,8,15,3,3,12,1,3,12,1,3,12,1,3,0,12,1,3],"f":[0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],-1,2],[[3,4],5],[[3,4],5],[-1,-1,[]],[-1,-1,[]],[6,3],[7,3],[-1,-1,[]],[8,[[11,[[10,[9]]]]]],[-2,[[11,[12]]],13,[[8,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,14],[[8,14,-1],[[11,[[10,[9]]]]],[]],[[15,14,[16,[9]],-2],[[11,[17]]],13,[[18,[-1]]]],[3,[[20,[19]]]],[-1,21,[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[[12,-2],[[11,[17]]],13,[[15,[-1,[1,[-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[5,"RandNums",0],[10,"Copy",47],[6,"Error",0],[5,"Formatter",48],[8,"Result",48],[6,"Error",49],[6,"SerializationError",50],[10,"InteractiveProver",0],[1,"u8"],[5,"Vec",51],[8,"Result",0],[5,"FiatShamirTranscript",0],[10,"Field",52],[1,"usize"],[10,"InteractiveVerifier",0],[1,"slice"],[1,"bool"],[10,"RngF",49],[10,"Error",53],[6,"Option",54],[5,"String",55],[6,"Result",56],[5,"TypeId",57]],"b":[[17,"impl-Debug-for-Error"],[18,"impl-Display-for-Error"],[21,"impl-From%3CError%3E-for-Error"],[22,"impl-From%3CSerializationError%3E-for-Error"]]}],\
["gkr_protocol",{"doc":"The implementation of the GKR protocol.","t":"PPGPPPFGPIPPPPFGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNHNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOO","n":["Begin","Err","Error","FinalRoundMessage","FirstRound","Ok","Prover","ProverMessage","R","Result","RoundStarted","StartSumCheck","SumCheckProverMessage","SumCheckRoundResult","Verifier","VerifierMessage","WrongVerifierState","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c_1","check_input","eq","equivalent","equivalent","final_random_point","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","line","new","new","receive_prover_msg","receive_verifier_msg","restrict_poly","round_msg","start_protocol","start_round","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","c_1","circuit_outputs","num_vars","p","p","q","round","r","res"],"q":[[0,"gkr_protocol"],[77,"gkr_protocol::ProverMessage"],[84,"gkr_protocol::VerifierMessage"],[86,"ark_ff::fields::fft_friendly"],[87,"core::cmp"],[88,"ark_ff::fields"],[89,"rand::rng"],[90,"core::fmt"],[91,"core::fmt"],[92,"alloc::vec"],[93,"ark_poly::evaluations::multivariate::multilinear"],[94,"alloc::string"],[95,"core::result"],[96,"core::any"]],"d":["<code>Prover</code> begins the protocol by the claim about the outputs.","Contains the error value","GKR protocol error type.","In the final the restriction polynomial $q$ is added.","The first round has completed.","Contains the success value","The state of the Prover.","Messages emitted by the <code>Prover</code>.","Sends out the $r_i$ to be used by the <code>Prover</code>.","GKR protocol result type.","The j-th round has started.","Instruct the <code>Verifier</code> to start a Sum-Check protocol for …","A step of the current sum-check protocol.","A result of running a step in the current sum check …","The state of the Verifier.","Messages emitted by the <code>Verifier</code>.","Wrong state.","","","","","","","","","","","Get the $c_1$ of the current Sum-Check prover.","Perform the final check of the input.","","","","Final random point in the Sum-Check protocol.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Compute a line","Create a new <code>Verifier</code> with the claim of the <code>Prover</code>.","Create a new <code>Prover</code> state from a circuit and an evaluation.","Receive a message from <code>Prover</code>.","Receive a message from the <code>Verifier</code>.","Restrict a polynomial to a given line.","Perform a step of the Sum-Check protocol and provide a …","At the start of the protocol $P$ sends a function $D: …","Create a Sum-Check prover for round $i$.","","","","","","","","","","","","","","","","","","","","","","A $c_1$ from Sum-Check protocol.","Claimed outputs","A number of variables.","A polynomial sent at each step of Sum-Check.","A polynomial sent at each step of Sum-Check.","Sends a univariate polynomial $q$ of degree at most k_…","At which round of GKR this Sum-Check is being started.","$r_i$","Result of a Sum-Check round."],"i":[6,10,0,6,9,10,0,0,9,0,9,6,6,9,0,0,12,3,1,12,9,6,3,1,12,9,6,1,3,6,6,6,3,12,12,9,6,3,1,12,9,6,3,1,12,9,6,0,3,1,3,1,0,1,1,1,12,3,1,12,9,6,3,1,12,9,6,3,1,12,9,6,3,1,12,9,6,24,25,24,26,27,27,24,28,29],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],-1,2],[[[3,[-1]],[4,[-1]]],5,2],[[[6,[-1]],[6,[-1]]],5,[7,8]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[[3,[-1]],-2],[[10,[[9,[-1]]]]],2,11],[[12,13],14],[[12,13],14],[[[9,[-1]],13],14,[15,8]],[[[6,[-1]],13],14,[15,8]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[-1]],[4,[-1]]],[[17,[[16,[-1]]]]],8],0,0,[[[3,[-1]],[6,[-1]],-2],[[10,[[9,[-1]]]]],2,11],[[[1,[-1]],[9,[-1]]],18,2],[[[4,[-1]],[4,[-1]],-2],[[16,[-1]]],8,[[19,[-1]]]],[[[1,[-1]],20],[[6,[-1]]],2],[[[1,[-1]]],[[6,[-1]]],2],[[[1,[-1]],20,[4,[-1]]],[[6,[-1]]],2],[-1,21,[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0],"c":[],"p":[[5,"Prover",0],[10,"FftField",86],[5,"Verifier",0],[1,"slice"],[1,"bool"],[6,"ProverMessage",0],[10,"PartialEq",87],[10,"Field",88],[6,"VerifierMessage",0],[8,"Result",0],[10,"Rng",89],[6,"Error",0],[5,"Formatter",90],[8,"Result",90],[10,"Debug",90],[5,"SparsePolynomial",91],[5,"Vec",92],[1,"tuple"],[10,"MultilinearExtension",93],[1,"usize"],[5,"String",94],[6,"Result",95],[5,"TypeId",96],[15,"StartSumCheck",77],[15,"Begin",77],[15,"SumCheckProverMessage",77],[15,"FinalRoundMessage",77],[15,"R",84],[15,"SumCheckRoundResult",84]],"b":[[33,"impl-Display-for-Error"],[34,"impl-Debug-for-Error"]]}],\
["matrix_multiplication",{"doc":"","t":"FNNNNNNNNNNNNNNNNN","n":["G","borrow","borrow_mut","clone","clone_into","evaluate","fix_variables","from","into","new","num_vars","to_evaluations","to_owned","to_univariate","try_from","try_into","type_id","vzip"],"q":[[0,"matrix_multiplication"],[18,"core::clone"],[19,"ark_ff::fields"],[20,"core::option"],[21,"ark_ff::fields::fft_friendly"],[22,"core::iter::traits::collect"],[23,"alloc::vec"],[24,"ark_poly::polynomial::univariate::sparse"],[25,"core::result"],[26,"core::any"]],"d":["A polynomial of form $g(z) = \\\\tilde{f}_A(r_1,z) \\\\cdot …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create $g$ for evaluating $f_A \\\\cdot f_B$ at any given …","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[-1,-2],4,[],[]],[[[1,[-1]],[5,[-1]]],[[6,[-1]]],7],[[[1,[-1]],[5,[-1]]],[[1,[-1]]],7],[-1,-1,[]],[-1,-2,[],[]],[[8,-2,-2,[5,[-1]]],[[1,[-1]]],3,[[10,[],[[9,[-1]]]]]],[[[1,[-1]]],8,7],[[[1,[-1]]],[[11,[-1]]],7],[-1,-2,[],[]],[[[1,[-1]]],[[12,[-1]]],7],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,-2,[],[]]],"c":[],"p":[[5,"G",0],[10,"Clone",18],[10,"Field",19],[1,"tuple"],[1,"slice"],[6,"Option",20],[10,"FftField",21],[1,"usize"],[17,"Item"],[10,"IntoIterator",22],[5,"Vec",23],[5,"SparsePolynomial",24],[6,"Result",25],[5,"TypeId",26]],"b":[]}],\
["multilinear_extensions",{"doc":"","t":"HH","n":["cti_multilinear_from_evaluations","vsbw_multilinear_from_evaluations"],"q":[[0,"multilinear_extensions"],[2,"ark_ff::fields"]],"d":["Evaluate multilinear extension with an algorith from <code>VSBW13</code>","Evaluate multilinear extension of with an algorithm from …"],"i":[0,0],"f":[[[[1,[-1]],[1,[-1]]],-1,2],[[[1,[-1]],[1,[-1]]],-1,2]],"c":[],"p":[[1,"slice"],[10,"Field",2]],"b":[]}],\
["relaxed_pcs",{"doc":"The implementation of the Relaxed PCS protocol.","t":"PPPGPKPPPFIPRFNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["ArkCryptoPrimitivesError","DegreeMismatch","Err","Error","EvalMismatch","IF","NoProverPoly","Ok","PolyEvalDimMismatch","Prover","Result","ToBytesError","Values","Verifier","all_multidimentional_values","all_values","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","challenge","challenge_prover","commited_univariate","fmt","fmt","from","from","from","from","into","into","into","merkle_root","new","new","poly_restriction_to_line","random_line","source","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify_prover_reply","vzip","vzip","vzip"],"q":[[0,"relaxed_pcs"],[54,"alloc::vec"],[55,"core::iter::traits::collect"],[56,"ark_crypto_primitives::merkle_tree"],[57,"ark_poly::evaluations::multivariate::multilinear"],[58,"ark_crypto_primitives::merkle_tree"],[59,"rand::rng"],[60,"ark_poly::polynomial::univariate::sparse"],[61,"core::fmt"],[62,"core::fmt"],[63,"core::error"],[64,"core::option"],[65,"alloc::string"],[66,"core::result"],[67,"core::any"]],"d":["","","Contains the error value","Crate error type.","","Iterate over all possible values of a finite field.","","Contains the success value","","Prover in the Relaxed PCS protocol.","Crate <code>Result</code> type.","","Type of the values.","The Verifier in the Relaxed PCS protocol.","Get all permutations of the values of the type.","Get all values of the type.","","","","","","","Challenge","Challenge the prover at some point.","Receive the commited univariate polynomial from Prover.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the merkle root.","Create a new Verifier.","Create a new Prover.","Restrict to line.","Generate a random line to challenge the <code>Prover</code>.","","","","","","","","","","","","Verify the prover’s reply.","","",""],"i":[18,18,10,0,18,0,18,10,18,0,0,18,3,0,3,3,14,7,18,14,7,18,7,14,14,18,18,14,7,18,18,14,7,18,7,14,7,7,14,18,18,14,7,18,14,7,18,14,7,18,14,14,7,18],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[4,[[4,[[3,[],[[2,[-1]]]]]]]]],[[6,[],[[5,[]]]]]],[[],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[7,[-1,-2,-3]],[4,[-1]]],[[10,[[9,[[8,[-3]],-1]]]]],3,[[11,[-1]]],[[13,[],[[12,[-1]]]]]],[[[14,[-1,-2]],-3],[[4,[-1]]],15,[[13,[],[[12,[-1]]]]],16],[[[14,[-1,-2]],[17,[-1]]],[[10,[9]]],15,[[13,[],[[12,[-1]]]]]],[[18,19],20],[[18,19],20],[-1,-1,[]],[-1,-1,[]],[21,18],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[7,[-1,-2,-3]]],[],3,[[11,[-1]]],[[13,[],[[12,[-1]]]]]],[[1,1],[[14,[-1,-2]]],15,[[13,[],[[12,[-1]]]]]],[-2,[[10,[[7,[-1,-2,-3]]]]],3,[[11,[-1]]],[[13,[],[[12,[-1]]]]]],[[[7,[-1,-2,-3]],[22,[-1]],[22,[-1]]],[[17,[-1]]],3,[[11,[-1]]],[[13,[],[[12,[-1]]]]]],[[[14,[-1,-2]],-3],[[9,[[4,[-1]],[4,[-1]]]]],15,[[13,[],[[12,[-1]]]]],16],[18,[[24,[23]]]],[-1,25,[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[[[14,[-1,-2]],[8,[-2]],-1],[[10,[9]]],15,[[13,[],[[12,[-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[1,"usize"],[17,"Values"],[10,"IF",0],[5,"Vec",54],[17,"Item"],[10,"IntoIterator",55],[5,"Prover",0],[5,"Path",56],[1,"tuple"],[8,"Result",0],[10,"MultilinearExtension",57],[17,"Leaf"],[10,"Config",56],[5,"Verifier",0],[10,"Field",58],[10,"Rng",59],[5,"SparsePolynomial",60],[6,"Error",0],[5,"Formatter",61],[8,"Result",61],[8,"Error",62],[1,"slice"],[10,"Error",63],[6,"Option",64],[5,"String",65],[6,"Result",66],[5,"TypeId",67]],"b":[[25,"impl-Display-for-Error"],[26,"impl-Debug-for-Error"]]}],\
["sum_check_protocol",{"doc":"","t":"FGPPPFPKKFGNNNNNNNNNNNMMMNNNNNNNNNNNNNNNNNNMNNNNMNMNNNNNNNNNNNNNNNNNNNN","n":["BooleanHypercube","Error","FinalRound","JthRound","NoPolySet","Prover","ProverClaimMismatch","RngF","SumCheckPolynomial","Verifier","VerifierRoundResult","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c_1","draw","evaluate","fix_variables","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","into_iter","new","new","new","next","num_vars","num_vars","round","round","set_c_1","to_evaluations","to_string","to_univariate","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"sum_check_protocol"],[71,"ark_ff::fields"],[72,"core::option"],[73,"core::fmt"],[74,"core::fmt"],[75,"core::result"],[76,"alloc::vec"],[77,"alloc::string"],[78,"core::any"]],"d":["A convenient way to iterate over $n$-dimentional boolean …","An error type of sum check protocol","On final round the verifier outputs <code>true</code> or <code>false</code> if it …","On $j$-th round the verifier outputs a random $r_j$ value","","The state of the Prover.","","","An abstraction over all types of polynomials that may be …","The state of the Verifier.","Values returned by Validator as a result of its run on …","","","","","","","","","","","Get the value $C_1$ that prover claims equal true answer.","","Evaluates <code>self</code> at a given point","Reduce the number of variables in <code>Self</code> by fixing a …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create an $n$-dimentional <code>BooleanHypercube</code>","Create a new <code>Prover</code> state with the polynomial $g$.","Create the new state of the <code>Verifier</code>.","","Returns the number of variables in <code>self</code>","","Perform $j$-th round of the <code>Prover</code> side of the prococol.","Perform the $j$-th round of the <code>Verifier</code> side of the …","","Returns a list of evaluations over the domain, which is the","","Compute the $j$-th round of polynomial for sumcheck over …","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,10,10,7,0,7,0,0,0,0,13,1,15,7,10,13,1,15,7,10,1,4,3,3,7,7,10,13,1,15,7,10,13,1,15,7,10,13,13,1,15,13,3,1,1,15,15,3,7,3,13,1,15,7,10,13,1,15,7,10,13,1,15,7,10,13,1,15,7,10],"f":[0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1,-2]]],-1,2,[[3,[-1]]]],[4,-1,[]],[[3,[5,[-1]]],[[6,[-1]]],2],[[3,[5,[-1]]],3,2],[[7,8],9],[[7,8],9],[[[10,[-1]],8],9,[11,2]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[12,[[13,[-1]]],2],[-2,[[1,[-1,-2]]],2,[[3,[-1]]]],[[14,[6,[-2]]],[[15,[-1,-2]]],2,[[3,[-1]]]],[[[13,[-1]]],[[6,[-2]]],2,[]],[3,14],[[[1,[-1,-2]]],14,2,[[3,[-1]]]],[[[1,[-1,-2]],-1,14],[[16,[-1]]],2,[[3,[-1]]]],[[[15,[-1,-2]],[16,[-1]],-3],[[17,[[10,[-1]],7]]],2,[[3,[-1]]],[[4,[-1]]]],[[[15,[-1,-2]],-1],18,2,[[3,[-1]]]],[3,[[19,[-1]]],2],[-1,20,[]],[3,[[16,[-1]]],2],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[5,"Prover",0],[10,"Field",71],[10,"SumCheckPolynomial",0],[10,"RngF",0],[1,"slice"],[6,"Option",72],[6,"Error",0],[5,"Formatter",73],[8,"Result",73],[6,"VerifierRoundResult",0],[10,"Debug",73],[1,"u32"],[5,"BooleanHypercube",0],[1,"usize"],[5,"Verifier",0],[5,"SparsePolynomial",74],[6,"Result",75],[1,"tuple"],[5,"Vec",76],[5,"String",77],[5,"TypeId",78]],"b":[[25,"impl-Debug-for-Error"],[26,"impl-Display-for-Error"]]}],\
["triangle_counting",{"doc":"","t":"FNNNNNNNNNNNNNNNNN","n":["G","borrow","borrow_mut","clone","clone_into","evaluate","fix_variables","from","into","new_adj_matrix","num_vars","to_evaluations","to_owned","to_univariate","try_from","try_into","type_id","vzip"],"q":[[0,"triangle_counting"],[18,"core::clone"],[19,"ark_ff::fields"],[20,"core::option"],[21,"ark_ff::fields::fft_friendly"],[22,"core::iter::traits::collect"],[23,"alloc::vec"],[24,"ark_poly::polynomial::univariate::sparse"],[25,"core::result"],[26,"core::any"]],"d":["A polynomial","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new $3 \\\\log n$-variate polynomial $g(X,Y,Z)$ from","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[-1,-2],4,[],[]],[[[1,[-1]],[5,[-1]]],[[6,[-1]]],7],[[[1,[-1]],[5,[-1]]],[[1,[-1]]],7],[-1,-1,[]],[-1,-2,[],[]],[[8,-1],[[1,[-2]]],[[11,[],[[9,[10]]]]],3],[[[1,[-1]]],8,7],[[[1,[-1]]],[[12,[-1]]],7],[-1,-2,[],[]],[[[1,[-1]]],[[13,[-1]]],7],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,-2,[],[]]],"c":[],"p":[[5,"G",0],[10,"Clone",18],[10,"Field",19],[1,"tuple"],[1,"slice"],[6,"Option",20],[10,"FftField",21],[1,"usize"],[17,"Item"],[1,"bool"],[10,"IntoIterator",22],[5,"Vec",23],[5,"SparsePolynomial",24],[6,"Result",25],[5,"TypeId",26]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
